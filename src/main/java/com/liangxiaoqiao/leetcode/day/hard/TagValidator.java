package com.liangxiaoqiao.leetcode.day.hard;


/*
 * English
 * id: 591
 * title: Tag Validator
 * href: https://leetcode.com/problems/tag-validator
 * desc: Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:\nThe code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\nA closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\nA valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\nA valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\nA start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\nA < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).\nThe cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.\nCDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.\nValid Code Examples:\nInput: \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\nOutput: True\nExplanation: \nThe code is wrapped in a closed tag : <DIV> and </DIV>. \nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \nAlthough CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\nInput: \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\nOutput: True\nExplanation:\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -> \"<DIV>\"\nend_tag -> \"</DIV>\"\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -> \">>  ![cdata[]] \"\ncdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\ntext2 -> \"]]>>]\"\nThe reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.\nInvalid Code Examples:\nInput: \"<A>  <B> </A>   </B>\"\nOutput: False\nExplanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\n\nInput: \"<DIV>  div tag is not closed  <DIV>\"\nOutput: False\n\nInput: \"<DIV>  unmatched <  </DIV>\"\nOutput: False\n\nInput: \"<DIV> closed tags with invalid tag name  <b>123</b> </DIV>\"\nOutput: False\n\nInput: \"<DIV> unmatched tags with invalid tag name  </1234567890> and <CDATA[[]]>  </DIV>\"\nOutput: False\n\nInput: \"<DIV>  unmatched start tag <B>  and unmatched end tag </C>  </DIV>\"\nOutput: False\nNote:\nFor simplicity, you could assume the input code (including the any characters mentioned above) only contain letters, digits, \'<\',\'>\',\'/\',\'!\',\'[\',\']\' and \' \'.
 * <p>
 * 中文
 * 序号: 591
 * 标题： 标签验证器
 * 链接： https://leetcode-cn.com/problems/tag-validator
 * 描述： 给定一个表示代码片段的字符串，你需要实现一个验证器来解析这段代码，并返回它是否合法。合法的代码片段需要遵守以下的所有规则：\n代码必须被合法的闭合标签包围。否则，代码是无效的。\n闭合标签（不一定合法）要严格符合格式：<TAG_NAME>TAG_CONTENT</TAG_NAME>。其中，<TAG_NAME>是起始标签，</TAG_NAME>是结束标签。起始和结束标签中的 TAG_NAME 应当相同。当且仅当 TAG_NAME 和 TAG_CONTENT 都是合法的，闭合标签才是合法的。\n合法的 TAG_NAME 仅含有大写字母，长度在范围 [1,9] 之间。否则，该 TAG_NAME 是不合法的。\n合法的 TAG_CONTENT 可以包含其他合法的闭合标签，cdata （请参考规则7）和任意字符（注意参考规则1）除了不匹配的<、不匹配的起始和结束标签、不匹配的或带有不合法 TAG_NAME 的闭合标签。否则，TAG_CONTENT 是不合法的。\n一个起始标签，如果没有具有相同 TAG_NAME 的结束标签与之匹配，是不合法的。反之亦然。不过，你也需要考虑标签嵌套的问题。\n一个<，如果你找不到一个后续的>与之匹配，是不合法的。并且当你找到一个<或</时，所有直到下一个>的前的字符，都应当被解析为 TAG_NAME（不一定合法）。\ncdata 有如下格式：<![CDATA[CDATA_CONTENT]]>。CDATA_CONTENT 的范围被定义成 <![CDATA[ 和后续的第一个 ]]>之间的字符。\nCDATA_CONTENT 可以包含任意字符。cdata 的功能是阻止验证器解析CDATA_CONTENT，所以即使其中有一些字符可以被解析为标签（无论合法还是不合法），也应该将它们视为常规字符。\n合法代码的例子:\n输入: \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\n\n输出: True\n\n解释: \n\n代码被包含在了闭合的标签内： <DIV> 和 </DIV> 。\n\nTAG_NAME 是合法的，TAG_CONTENT 包含了一些字符和 cdata 。 \n\n即使 CDATA_CONTENT 含有不匹配的起始标签和不合法的 TAG_NAME，它应该被视为普通的文本，而不是标签。\n\n所以 TAG_CONTENT 是合法的，因此代码是合法的。最终返回True。\n\n\n输入: \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\n\n输出: True\n\n解释:\n\n我们首先将代码分割为： start_tag|tag_content|end_tag 。\n\nstart_tag -> \"<DIV>\"\n\nend_tag -> \"</DIV>\"\n\ntag_content 也可被分割为： text1|cdata|text2 。\n\ntext1 -> \">>  ![cdata[]] \"\n\ncdata -> \"<![CDATA[<div>]>]]>\" ，其中 CDATA_CONTENT 为 \"<div>]>\"\n\ntext2 -> \"]]>>]\"\n\n\nstart_tag 不是 \"<DIV>>>\" 的原因参照规则 6 。\ncdata 不是 \"<![CDATA[<div>]>]]>]]>\" 的原因参照规则 7 。\n不合法代码的例子:\n输入: \"<A>  <B> </A>   </B>\"\n输出: False\n解释: 不合法。如果 \"<A>\" 是闭合的，那么 \"<B>\" 一定是不匹配的，反之亦然。\n\n输入: \"<DIV>  div tag is not closed  <DIV>\"\n输出: False\n\n输入: \"<DIV>  unmatched <  </DIV>\"\n输出: False\n\n输入: \"<DIV> closed tags with invalid tag name  <b>123</b> </DIV>\"\n输出: False\n\n输入: \"<DIV> unmatched tags with invalid tag name  </1234567890> and <CDATA[[]]>  </DIV>\"\n输出: False\n\n输入: \"<DIV>  unmatched start tag <B>  and unmatched end tag </C>  </DIV>\"\n输出: False\n注意:\n为简明起见，你可以假设输入的代码（包括提到的任意字符）只包含数字, 字母, \'<\',\'>\',\'/\',\'!\',\'[\',\']\'和\' \'。
 * <p>
 * acceptance: 33.7%
 * difficulty: Hard
 * private: False
 */


//TODO init
public class TagValidator {
    public boolean isValid(String code) {
        return false;
    }
}